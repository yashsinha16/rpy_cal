==================================================Code Quality and Code Coverage Report=================================================
1)Cpp style check:-
	->	The files have been adhered to the clang-format using the following command:-
		clang-format -i -style=Google main.cpp header.h fun.cpp fun.h header.cpp

2)Cpp check:-
	->	This is executed by the help of following command at the path where the project file is located:-
		cppcheck --enable=all .
	Result:-
		The json files throws errors many errors:- 
			[json.hpp:9987]: (warning) %g in format string (no. 2) requires 'double' but the argument type is 'number_float_t'.
			[json.hpp:2096]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2100]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2103]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2106]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2109]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2131]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2172]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:2180]: (style) Class 'input_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:5701]: (style) Class 'output_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:5704]: (style) Class 'output_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:5707]: (style) Class 'output_adapter' has a constructor with 1 argument that is not explicit.
			[json.hpp:10124]: (style) Class 'json_ref' has a constructor with 1 argument that is not explicit.

		The code files shows the following:-
			Checking fun.cpp: _HAS_CXX14...
			Checking fun.cpp: _HAS_CXX17...
			Checking fun.cpp: _MSC_VER...
			[json.hpp:11205]: (information) Skipping configuration '_MSC_VER' since the value of '_MSC_VER' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.
			1/3 files checked 33% done
			Checking header.cpp ...
			[header.cpp]: (information) Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations.
			[header.cpp:8]: (performance) Function parameter 's' should be passed by reference.
			Checking header.cpp: JSON_CATCH_USER...
			Checking header.cpp: JSON_INTERNAL_CATCH_USER...
			Checking header.cpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...
			Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK...
			Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__GNUC__...
			Checking header.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__clang__...
			Checking header.cpp: JSON_THROW_USER...
			Checking header.cpp: JSON_TRY_USER...
			Checking header.cpp: _HAS_CXX14...
			Checking header.cpp: _HAS_CXX17...
			Checking header.cpp: _MSC_VER...
			2/3 files checked 66% done
			Checking main.cpp ...
			[main.cpp]: (information) Too many #ifdef configurations - cppcheck only checks 12 of 24 configurations. Use --force to check all configurations.
			Checking main.cpp: JSON_CATCH_USER...
			Checking main.cpp: JSON_INTERNAL_CATCH_USER...
			Checking main.cpp: JSON_NOEXCEPTION;_CPPUNWIND;__EXCEPTIONS;__cpp_exceptions...
			Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK...
			Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__GNUC__...
			Checking main.cpp: JSON_SKIP_UNSUPPORTED_COMPILER_CHECK;__clang__...
			Checking main.cpp: JSON_THROW_USER...
			Checking main.cpp: JSON_TRY_USER...
			Checking main.cpp: _HAS_CXX14...
			Checking main.cpp: _HAS_CXX17...
			Checking main.cpp: _MSC_VER...
			3/3 files checked 100% done

3)Valgrind check:-
	This is done by using the following command:- valgrind ./main
	Result:-(The readings of the code have been omitted for clarity)
			==2750== Memcheck, a memory error detector
			==2750== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
			==2750== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
			==2750== Command: ./main
			==2750== 
			==2750== 
			==2750== HEAP SUMMARY:
			==2750==     in use at exit: 0 bytes in 0 blocks
			==2750==   total heap usage: 56,338 allocs, 56,338 frees, 3,110,787 bytes allocated
			==2750== 
			==2750== All heap blocks were freed -- no leaks are possible
			==2750== 
			==2750== For counts of detected and suppressed errors, rerun with: -v
			==2750== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)


4)Lcov report:-
	Result:-
				Overall coverage rate:
			    lines......: 64.9% (1581 of 2436 lines)
			    functions..: 77.5% (1057 of 1363 functions)


				LCOV - code coverage report

				Current view:	top level			Hit	    Total		Coverage
				Test:	coverage.info		Lines:	1581	2436	    64.9 %
				Date:2018-08-22 05:20:50	Function:1057	1363	    77.5 %

				The detailed report is present in html file.










